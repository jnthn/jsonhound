#!/usr/bin/env perl6
use JSON::Fast;
use JsonHound::Reporter::CLI;
use JsonHound::RuleSet;

sub MAIN(
        $validations,  #= Path to module specifying the validation to apply
        *@json-files   #= The JSON file(s) to validate
        ) {
    my $*JSON-HOUND-RULESET = JsonHound::RuleSet.new;
    my $rule-file = $validations.IO;
    CompUnit::RepositoryRegistry.use-repository:
            CompUnit::RepositoryRegistry.repository-for-spec($rule-file.parent.absolute);
    require "$rule-file.basename()";

    # We process the input files in parallel, but then do reporting of those
    # results one at a time. The `map` produces closures that are invoked with
    # the reporter; the `for` enforces one-at-a-time behavior. This means that
    # reporters don't need to account for concurrency.
    my $reporter = JsonHound::Reporter::CLI.new;
    .($reporter) for @json-files.race(:1batch).map: -> $file {
        with slurp($file) -> $json {
            with try from-json($json) -> $parsed {
                if $*JSON-HOUND-RULESET.validate($parsed) -> @violations {
                    *.validation-error($file, @violations);
                }
                else {
                    *.ok($file);
                }
            }
            else {
                *.file-error($file, "invalid JSON: $!");
            }
        }
        else {
            *.file-error($file, "file not found");
        }
    };
    exit($reporter.exit-code // 0);
}
